type User {
    id: Int!
    first_name: String!
    last_name: String!
    email: String!
    username: String!
    tasks: [Task]!
}

type Task {
    id: Int!
    title: String!
    description: String
    # owners: [User]!
    comments: [Comment]
    user_id: Int!
    owner: User!
}

type Comment {
    id: Int!
    content: String!
    createdAt: String!
    by: User!
    user_id: Int!
    task: Task!
    task_id: Int!
}

type AuthPayload {
    token: String!
    user: User!
}

type Query {
    users: [User]
    tasks: [Task]
    comments: [Comment]
}

type Mutation {
    signup(input: SignupInput!): AuthPayload
    login(email: String!, password: String!): AuthPayload
    deleteUser(id: Int): [User]
    addTask(task: TaskInput!): Task!
    deleteTask(id: Int!): Task!
    addComment(comment: CommentInput!): Comment!
    deleteComment(id: Int!): Comment!
}

input SignupInput {
    first_name: String!
    last_name: String!
    email: String!
    username: String!
    password: String!
}

input TaskInput {
    title: String!
    description: String
}

input CommentInput {
    content: String!
    task: Int!
}
